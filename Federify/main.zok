import "./u32_array_to_field_array" as u32_array_to_field
import "./u32_array_to_u64_array" as u32_array_to_u64
import "hashes/keccak/256bit" as keccak



def computation_check <D, N, F>(u64[4] random_value, u64[4] hash_value, u32[N][D]input_data, u64[F]flattened_format) -> u64[4]:
/////// Note: F should be dividable by D
    assert(F% D == 0)
    u32 G = F/D
    u32 last_group = N % G
    u32 R =  if last_group == 0 then N/G else (N/G) + 1 fi
    u32 index = 0
    u64[D] formated_data = u32_array_to_u64(input_data[0])
    bool is_correct = false
    u64[4] data_hash = keccak([0])
    for u32 round in 0..R do
        index = round * G
        G = if round == (R-1) && last_group!= 0 then last_group else G fi
        for u32 group in 0..G do
            formated_data = u32_array_to_u64(input_data[index + group])
            for u32 feature in 0..D do
                flattened_format[(group * D) + feature] = formated_data[feature]
            endfor
        endfor
        data_hash = if round == R-1 && last_group!= 0 then keccak(flattened_format[0.. (last_group * D)]) else keccak(flattened_format) fi
        hash_value = keccak::<12>([random_value[0], random_value[1], random_value[2], random_value[3], hash_value[0], hash_value[1], hash_value[2], hash_value[3], data_hash[0], data_hash[1], data_hash[2], data_hash[3]])
    endfor
    return hash_value


def classified_model_check<D, N, C, F>( u32[N][D] data, u32[F][C] mu, u32[C] class_dist, u32[F][C] sum, u32[F][C] diff, u32[F][C] varience, u32 accuracy ) -> bool:
    bool out = true
    u32 diff_instance = 0
    u32 label = 0
    for u32 row in 0..N do
        label = data[row][F]
        class_dist[label] = class_dist[label] + 1
        for u32 feature in 0..F do
            sum[feature][label] = sum[feature][label] + data[row][feature]
            diff_instance = if data[row][feature] > mu[feature][label] then data[row][feature] - mu[feature][label] else mu[feature][label] - data[row][feature] fi
            diff[feature][label] = diff[feature][label] + (diff_instance*diff_instance)
        endfor
    endfor
    /////// check the computed values of the mean
    for u32 class in 0..C do
            for u32 feature in 0..F do
                sum[feature][class] = sum[feature][class] / class_dist[class]
                diff[feature][class] = diff[feature][class] / class_dist[class]
                out = out && (mu[feature][class] <= sum[feature][class] + accuracy/100  && mu[feature][class] >= sum[feature][class] - accuracy/100)
                out = out && (varience[feature][class] <= diff[feature][class] + (accuracy/100)* (accuracy/100)) && (varience[feature][class] >= diff[feature][class] - (accuracy/100)* (accuracy/100))
            endfor
    endfor
    assert(out)
    return true


def main(private u32[100][5] data, private u32[4][3] mu, private u32[4][3] varience, private u32[3] class_dist, private u32[4][3] mean_format, u32 accuracy, private u64[4] random_value, private u64[4] initial_random, u64[4] hash_input, private u64[25] flattened_format) -> bool :
    bool out = true
    u64[4] computed_hash = computation_check(random_value, initial_random, data, flattened_format)
    out = out && classified_model_check:: <5, 100, 3, 4>(data, mu, mean_format[0], mean_format, mean_format, varience, accuracy)
    out = out && (computed_hash[0] == hash_input[0] && computed_hash[1] == hash_input[1] && computed_hash[2] == hash_input[2] && computed_hash[3] == hash_input[3])
    assert out